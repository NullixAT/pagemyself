'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class PageMyself {
  /**
   * Global config
   * @type {{}}
   */

  /**
   * Init
   */
  static initLate() {
    window.addEventListener('hashchange', function () {
      PageMyself.onHashChange();
    }, false);
    PageMyself.onHashChange();
    FramelixDom.addChangeListener('pagemyself-dom', function () {
      PageMyself.onDomChange();
    });
  }
  /**
   * On dom change
   */


  static onDomChange() {
    const thumbSizes = [100, 500, 1000, 1500, 1920];
    $('[data-background-video]').each(function () {
      const el = $(this);
      const block = el.closest('.component-block');
      const backgroundVideo = el.attr('data-background-video');
      el.removeAttr('data-background-video');
      el.attr('data-background-video-original', backgroundVideo);
      FramelixIntersectionObserver.onGetVisible(this, function () {
        function updateVideoPosition() {
          const elWidth = block.width();
          const elHeight = block.height();
          const wRatio = 1 / video.videoWidth * elWidth;
          const hRatio = 1 / video.videoHeight * elHeight;
          const maxRatio = Math.max(wRatio, hRatio);
          video.width = video.videoWidth * maxRatio;
          video.height = video.videoHeight * maxRatio;
          video.style.left = elWidth / 2 - video.width / 2 + 'px';
          video.style.top = elHeight / 2 - video.height / 2 + 'px';
        }
        /** @type {HTMLVideoElement} */


        const video = document.createElement('video');
        video.autoplay = true;
        video.loop = true;
        video.muted = true;
        video.src = backgroundVideo;
        video.poster = el.attr('data-background-image') || el.attr('data-background-original') || '';
        el.prepend(video);
        el.addClass('pagemyself-background-video');
        el.css('background-color', '');
        video.play();
        video.addEventListener('timeupdate', updateVideoPosition);
        video.addEventListener('play', updateVideoPosition);
        updateVideoPosition();
      });
    });
    $('[data-background-image]').each(function () {
      const el = $(this);
      let backgroundImage = el.attr('data-background-image');
      const backgroundPosition = el.attr('data-background-position') || 'center';
      el.removeAttr('data-background-image');
      el.attr('data-background-image-original', backgroundImage);
      FramelixIntersectionObserver.onGetVisible(this, function () {
        if (!el.attr('data-background-video') && !el.attr('data-background-video-original')) {
          // for uploaded images, automatically find best fitting thumb size
          if (backgroundImage.match(/\/uploads\/[0-9]+\//)) {
            const url = new URL(backgroundImage);
            let pathSplit = url.pathname.split('/');
            let basename = pathSplit.pop();

            if (basename.startsWith('t-')) {
              basename = basename.split('-', 3).pop();
            }

            const containerSize = Math.max(el.parent().width(), el.parent().height());
            let useThumbSize = 100;

            for (let i in thumbSizes) {
              const thumbSize = thumbSizes[i];
              const diff = containerSize - thumbSize;
              useThumbSize = thumbSize;
              if (diff <= 0) break;
            }

            basename = 't-' + useThumbSize + '-' + basename;
            pathSplit.push(basename);
            url.pathname = pathSplit.join('/');
            backgroundImage = url.toString();
          }

          el.css('background-image', 'url(' + backgroundImage + ')');
          el.css('background-position', 'center ' + backgroundPosition);
        }
      });
    });
  }
  /**
   * On hash change
   */


  static onHashChange() {
    if (!window.location.hash.startsWith('#jumpto-')) return;
    const target = $('.pagemyself-jump-mark').filter('[data-id=\'' + window.location.hash.substring(1) + '\']');
    if (!target.length) return;
    let offset = 0;
    const el = $('.pagemyself-jumpmark-offset').first();

    if (el.length) {
      const style = window.getComputedStyle(el[0]);

      if (style.position === 'sticky' || style.position === 'fixed') {
        offset += parseInt(style.height.replace(/\..*/g, '').replace(/[^0-9]/g, ''));
      }
    }

    Framelix.scrollTo(target, null, offset);
  }

}

_defineProperty(PageMyself, "config", {});

FramelixInit.late.push(PageMyself.initLate);

class PageMyselfTheme {
  /**
   * Enables responsive horizontal navigation
   * Does automatically hide navigation entries that not fit into the container
   * In this case it adds a menu button to show all navigation entries that are hidden
   */
  static enableResponsiveHorizontalNavigation() {
    function onResize() {
      const entries = navUl.children();
      entries.filter('.show-more').remove();
      entries.addClass('invisible');
      entries.removeClass('nav-entry-hidden');
      let w = 0;
      let i = 0;
      const maxW = navInner.width() - 60;
      let showMore = false;

      while ((w === 0 || w > maxW) && i++ <= 30) {
        const unhiddenEntries = entries.not('.nav-entry-hidden');
        if (unhiddenEntries.length <= 1) break;

        if (w !== 0) {
          unhiddenEntries.last().addClass('nav-entry-hidden');
          showMore = true;
        }

        w = 0;
        unhiddenEntries.each(function () {
          w += $(this).width();
        });
      }

      if (showMore) {
        navUl.append(`<li class="show-more">
          <span></span>
          <button class="framelix-button framelix-button-trans" data-icon-left="menu"></button>
          <span></span>
        </li>`); // check if the show more entry also overlaps

        const unhiddenEntries = navUl.children().not('.nav-entry-hidden').not('.show-more');
        w = 0;
        unhiddenEntries.each(function () {
          w += $(this).width();
        });

        if (unhiddenEntries.length > 2 && w > maxW) {
          unhiddenEntries.last().addClass('nav-entry-hidden');
        }
      }

      entries.removeClass('invisible');
    }

    const nav = $('.page-nav');
    const navInner = $('.page-nav-inner');
    const navUl = nav.find('ul').first();
    $(document).on('click', '.page-nav .nav-entry-group', function () {
      const ul = $(this).parent().children('ul');
      if (!ul.length) return;
      const ulClone = $(this).parent().children('ul').clone();
      ulClone.removeClass('hidden');
      const content = $(`<nav class="page-nav">`).append(ulClone);
      const popup = FramelixPopup.show(this, content);
      popup.popperEl.addClass('popup-nav');
      popup.popperEl.on('click', function () {
        popup.destroy();
      });
    });
    nav.on('click', '.show-more', function () {
      const navPopup = nav.clone();
      navPopup.find('.nav-entry-hidden').removeClass('nav-entry-hidden');
      navPopup.find('ul.hidden').each(function () {
        const group = $(this);
        const parent = $(this).closest('li');
        group.find('li').each(function () {
          $(this).find('.nav-entry').prepend(parent.find('button').text() + ': ');
          parent.after(this);
        });
        parent.remove();
      });
      const modal = FramelixModal.show({
        bodyContent: $('<div class="modal-nav"></div>').append(navPopup)
      });
      modal.bodyContainer.on('click', 'a', async function (ev) {
        ev.preventDefault();
        await modal.destroy();
        window.location.href = this.href;
      });
    });
    onResize();
    let resizeTo = null;
    $(window).on('resize', function () {
      if (resizeTo) return;
      resizeTo = setTimeout(function () {
        onResize();
        resizeTo = null;
      }, 100);
    });
  }

}