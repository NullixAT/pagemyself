'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

tinymce.PluginManager.add('pagemyself', function (editor, url) {
  /** @type {PageMyselfComponent} */
  const component = editor.pagemyselfComponent;
  const el = $(editor.targetElm);
  editor.ui.registry.addButton('pagemyself-save-text', {
    text: FramelixLang.get('__framelix_save__'),
    onAction: async function onAction() {
      Framelix.showProgressBar(1);
      await component.apiRequest('textEditorSaveText', {
        'id': el.attr('data-id'),
        'text': editor.getContent()
      });
      FramelixToast.success('__framelix_saved__');
      Framelix.showProgressBar(null);
      editor.initialContent = editor.getContent();
      editor.destroy();
      component.enableTextEditor(el);
    }
  });
  editor.ui.registry.addButton('pagemyself-cancel-text', {
    tooltip: FramelixLang.get('__pagemyself_reset_text__'),
    icon: 'rotate-left',
    onAction: function onAction() {
      editor.setContent(editor.initialContent);
      editor.destroy();
      component.enableTextEditor(el);
    }
  });
  editor.ui.registry.addMenuButton('pagemyself-templates', {
    text: FramelixLang.get('__pagemyself_editor_templates__'),
    fetch: function fetch(callback) {
      const templates = TinymceTemplates.getTemplates();
      let options = [];

      for (let id in templates) {
        const row = templates[id];
        options.push({
          type: 'menuitem',
          text: FramelixLang.get('__pagemyself_editor_templates_type_' + id.toLowerCase() + '__'),
          onAction: async function onAction() {
            let replacements = {};
            let values = null;
            const templateContainer = $('<div>').html(row.html);

            if (row.fields) {
              const modalContent = $('<div>');
              const form = new FramelixForm();

              for (let i in row.fields) {
                /** @type {FramelixFormField} */
                const field = row.fields[i];
                field.name = i.toString();
                form.addField(field);
              }

              form.addButton('accept', '__framelix_ok__', 'check', 'success');
              form.render();
              modalContent.append(form.container);
              const formModal = FramelixModal.show({
                bodyContent: modalContent
              });
              let proceed = false;
              form.container.on('click', '.framelix-form-buttons button', async function (ev) {
                ev.stopPropagation();
                ev.stopImmediatePropagation();

                if ((await form.validate()) === true) {
                  proceed = true;
                  formModal.destroy();
                }
              });
              await formModal.destroyed;
              if (!proceed) return;
              values = form.getValues();

              if (values) {
                replacements = values;
              }
            }

            await TinymceTemplates.onBeforeInsert(id, templateContainer, values);
            let html = templateContainer.html();

            for (let search in replacements) {
              html = html.replace(new RegExp(FramelixStringUtils.escapeRegex('{' + search + '}'), 'ig'), replacements[search]);
            }

            editor.insertContent(html);
          }
        });
      }

      callback(options);
    }
  });
  editor.ui.registry.addNestedMenuItem('pagemyself-templates', {
    text: FramelixLang.get('__pagemyself_editor_templates__'),
    tooltip: FramelixLang.get('__pagemyself_editor_templates_tooltip__'),
    getSubmenuItems: function getSubmenuItems() {
      const templatesInstance = window.top.eval('PageMyselfPageEditorTinymceTemplates');
      const templates = templatesInstance.getTemplates();
      let options = [];

      for (let id in templates) {
        const row = templates[id];
        options.push({
          type: 'menuitem',
          text: row.title,
          onAction: async function onAction() {
            let replacements = {};
            const templateContainer = $('<div>').html(row.html);

            if (row.fields) {
              const modalContent = $('<div>');
              const form = new FramelixForm();

              for (let i in row.fields) {
                /** @type {FramelixFormField} */
                const field = row.fields[i];
                field.name = i.toString();
                form.addField(field);
              }

              form.addButton('accept', '__framelix_ok__', 'check', 'success');
              form.render();
              modalContent.append(form.container);
              const formModal = FramelixModal.show({
                bodyContent: modalContent
              });
              let proceed = false;
              form.container.on('click', '.framelix-form-buttons button', function () {
                proceed = true;
                formModal.destroy();
              });
              await formModal.destroyed;
              if (!proceed) return;
              const values = form.getValues();

              if (values) {
                replacements = values;
              }
            }

            await templatesInstance.onBeforeInsert(id, templatesInstance);
            let html = templateContainer.html();

            for (let search in replacements) {
              html = html.replace(new RegExp(FramelixStringUtils.escapeRegex('{' + search + '}'), 'ig'), replacements[search]);
            }

            editor.insertContent(html + '<br/>');
          }
        });
      }

      return options;
    }
  });
  return {
    getMetadata: function getMetadata() {
      return {
        name: FramelixLang.get('__pagemyself_component_text_title__')
      };
    }
  };
});

class TinymceTemplates {
  /**
   * Get templates
   * @returns {Object<string, {html: string, title: string}>}
   */
  static getTemplates() {
    const defaultText = FramelixLang.get('__pagemyself_editor_templates_edit_text__');
    return {
      'alert': {
        'html': `<br/><div class="framelix-alert framelix-alert-customcolor" style="--color-custom-bg:{0}; --color-custom-text:{1};">${defaultText}</div><br/>`,
        'fields': [Object.assign(new FramelixFormFieldColor(), {
          'label': this.LABEL_COLOR_BG,
          'defaultValue': '#009dff',
          required: true
        }), Object.assign(new FramelixFormFieldColor(), {
          'label': this.LABEL_COLOR_TEXT,
          'defaultValue': '#fff',
          required: true
        })]
      },
      'buttonLink': {
        'html': `<a class="framelix-button framelix-button-customcolor" style="--color-custom-bg:{2}; --color-custom-text:{3};" href="{0}" target="_blank">{1}</a>`,
        'fields': [Object.assign(new FramelixFormFieldText(), {
          'label': 'URL',
          required: true
        }), Object.assign(new FramelixFormFieldText(), {
          'label': 'Text',
          required: true
        }), Object.assign(new FramelixFormFieldColor(), {
          'label': this.LABEL_COLOR_BG,
          'defaultValue': '#009dff',
          required: true
        }), Object.assign(new FramelixFormFieldColor(), {
          'label': this.LABEL_COLOR_TEXT,
          'defaultValue': '#fff',
          required: true
        })]
      },
      'columns': {
        'html': ``,
        'fields': [Object.assign(new FramelixFormFieldNumber(), {
          'label': '__pagemyself_editor_templates_type_columns_number__',
          required: true,
          max: 5,
          defaultValue: 2
        })]
      }
    };
  }
  /**
   * On before insert into the tinymce editor
   * Use this to ask user for some input or stuff like that that cant be handled with default fields
   * Manipulate template container to your needs
   * Do not bind events on this container, they will not be fired
   * @param {string} id The template id
   * @param {Cash} templateContainer
   * @param {Object=} formValues
   */


  static async onBeforeInsert(id, templateContainer, formValues) {
    switch (id) {
      case 'columns':
        const columns = parseInt(formValues[0]);
        const container = $(`<div class="pagemyself-columns" data-columns="${columns}"></div>`);

        for (let i = 1; i <= columns; i++) {
          container.append(`<div class="pagemyself-column">Your text here</div>`);
        }

        templateContainer.html(container);
        break;
    }
  }

}

_defineProperty(TinymceTemplates, "LABEL_COLOR_BG", '__pagemyself_editor_templates_colorpicker_bg__');

_defineProperty(TinymceTemplates, "LABEL_COLOR_TEXT", '__pagemyself_editor_templates_colorpicker_text__');